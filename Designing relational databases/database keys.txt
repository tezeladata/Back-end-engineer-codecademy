Keys enable a database designer to place constraints on the data in a table. We want to enforce data integrity in our tables so that we avoid duplicity of information and strictly maintain relationships between tables. For example, a primary key will ensure that each row in a table is unique.

There are many types of keys: Super, Candidate, Primary, Foreign, Composite, and Secondary. 

A primary key is a designation that applies to a column or multiple columns of a table that uniquely identifies each row in the table. For example, a Social Security Number for an employee may serve as a primary key in an employee table with rows of employee data.
Designating a primary key on a particular column in a table ensures that this column data is always unique and not null.
Example:
CREATE TABLE recipe (
  id integer PRIMARY KEY,
  name varchar(20),
  ...
);

As part of an international SQL standard, the information schema is a database containing meta information about objects in the database including tables, columns and constraints. This schema provides users with read-only views of many topics of interest.

To determine if a column has been designated correctly as a primary key, we can query a special view, key_column_usage, generated from this database. This view identifies all columns in the current database that are restricted by some constraint such as primary key or foreign key.
Suppose you would like to find out the constraints that have been placed on certain columns in a table, such as recipe, you would type the following query:
SELECT constraint_name, table_name, column_name FROM information_schema.key_column_usage WHERE table_name = 'recipe';
SELECT constraint_name, table_name, column_name FROM information_schema.key_column_usage WHERE table_name = 'book';

Sometimes, none of the columns in a table can uniquely identify a record. When this happens, we can designate multiple columns in a table to serve as the primary key, also known as a composite primary key:
CREATE TABLE popular_recipes (
  recipe_id varchar(20),
  ingredient_id varchar(20),
  downloaded integer,
  PRIMARY KEY (recipe_id, ingredient_id)
);

CREATE TABLE popular_books (
  book_title varchar(100),
  author_name varchar(50),
  number_sold integer,
  number_previewed integer,
  PRIMARY KEY (book_title, author_name)
);
SELECT constraint_name, table_name, column_name FROM information_schema.key_column_usage WHERE table_name = 'popular_books';
-- both of columns - book_title and author_name were show as primary keys

To maintain data integrity and ensure that we can join tables together correctly, we can use another type of key called a foreign key. A foreign key is a key that references a column in another table.
To designate a foreign key on a single column in PostgreSQL, we use the REFERENCES keyword:
CREATE TABLE person (
  id integer PRIMARY KEY,
  name varchar(20),
  age integer
);
CREATE TABLE email (
  email varchar(20) PRIMARY KEY,
  person_id integer REFERENCES person(id),
  storage integer,
  price money
);

CREATE TABLE chapter (
  id integer PRIMARY KEY,
  number integer,
  title varchar(50),
  content varchar(1024),
  book_isbn varchar(50) REFERENCES book(isbn)
);
SELECT constraint_name, table_name, column_name FROM information_schema.key_column_usage WHERE table_name = 'chapter';
-- chapter_book_isbn was shown as foreign key

After correct connection with foreign key, we can already connect tables:
SELECT book.title AS book, chapter.title AS chapters FROM book JOIN chapter ON book.isbn = chapter.book_isbn;