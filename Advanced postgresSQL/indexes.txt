An index is an organization of the data in a table to help with performance when searching and filtering records. A table can have zero, one, or many indexes.

Let’s start by learning how to see what indexes already exist on a table. Say you want to see what indexes exist on your products table you would run the following query:
SELECT * FROM pg_Indexes WHERE tablename = 'products';
SELECT * FROM pg_Indexes WHERE tablename = 'PUBLIC.countries';
SELECT * FROM pg_Indexes WHERE tablename = 'customers';

Indexing allows you to organize your database structure in such a way that it makes finding specific records much faster. By default it divides the possible matching records in half, then half, then half, and so on until the specific match you are searching for is found. This is known as a Binary Tree, or B-Tree.

Let us say you were searching 1,000,000 records. Without an index on the column you were searching, you would need to look through all 1,000,000 records (assuming its a non-unique column). With a B-Tree index, in the worst case, you would have to search 20 comparisons (log2n).

EXPLAIN ANALYZE SELECT * FROM customers;
This would return the plan that the server will use to give you every row from every record from the customers table.

EXPLAIN ANALYZE SELECT * FROM customers WHERE first_name = 'David';
EXPLAIN ANALYZE SELECT * FROM public.countries;
EXPLAIN ANALYZE SELECT * FROM customers WHERE last_name = 'Jones';

“Seq Scan” - the system is scanning every record to find the specific records you are looking for.
“Index” - the server is taking advantage of an index to improve the speed of your search.

In PostgreSQL, the CREATE INDEX keywords can be used to create an index on a column of a table. Say you wanted to create an index called customers_user_name_idx on the customers table on the user_name column, this is how you would do that:
CREATE INDEX customers_user_name_idx ON customers (user_name);

Keep in mind that indexes are great for searching but like everything in life, nothing comes without a cost. In the case of indexes, it comes at the cost of increased runtime for any modification to the table data impacting the user_name column. Another cost is the space that the index takes up.

CREATE INDEX customers_city_idx ON customers (city);
CREATE INDEX country_index ON public.countries (country);
CREATE INDEX customers_last_name_idx ON customers (last_name);

Multi-column index:
CREATE INDEX customers_last_name_first_name_idx ON customers (last_name, first_name);
EXPLAIN ANALYZE SELECT * FROM customers WHERE last_name = 'Jones' AND first_name = 'David';

In PostgreSQL, the DROP INDEX command can be used to drop an existing index.
DROP INDEX customers_last_name_idx;
SELECT * FROM pg_Indexes WHERE tablename = 'customers';

Indexes speed up searching and filtering, however, they slow down insert, update, and delete statements.

Get the size of table: SELECT pg_size_pretty (pg_total_relation_size('table_name'));